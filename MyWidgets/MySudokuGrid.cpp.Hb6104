#include "MySudokuGrid.h"
#include <iostream>
//按键名[行][列]
SudokuGridWidget::SudokuGridWidget(QWidget *parent) :
    QWidget(parent),
    Pause(false),
    selectNumber(0),
    ImportFlag(0),
    FakeClick(0)
{
    Buttons.clear();
    QGridLayout* SudokuGridLayout=new QGridLayout;
    SudokuGridLayout->setSpacing(0);
    SudokuGridLayout->setContentsMargins(0,0,0,0);
    for(int i=1;i<4;i++)
        for(int j=1;j<4;j++)
        {
            QLabel* blocklabel=new QLabel;
            blocklabel->setFixedSize(188,188);
            QString style;
            style+="border:4px solid blue;";
            style+="border-radius:4px";
            blocklabel->setStyleSheet(style);
            SudokuGridLayout->addWidget(blocklabel,(i-1)*184,(j-1)*184,188,188);
        }
    for(int i=1;i<10;i++)
        for(int j=1;j<10;j++)
        {
            //按键
            MyGridButtonWithBoardMenu* button=new MyGridButtonWithBoardMenu;
            button->setObjectName(QString::number(i*10+j,10));
            //按键加入
            SudokuGridLayout->addWidget(button,(i+2)/3*4+(i-1)*60,(j+2)/3*4+(j-1)*60,60,60);
            //消息响应
            connect(button,SIGNAL(BoardButton_ButtonSet(std::set<int>,int)),this,SLOT(Grid_OnChangeGridSet(std::set<int>,int)));
            Buttons.push_back(button);
        }
    setLayout(SudokuGridLayout);
}

void SudokuGridWidget::Grid_Import(int hardness)
{
    FakeClick=0;
    selectNumber=0;
    ImportFlag=1;
    Clue=0;
    GridNumbers.clear();
    qDebug()<<"Import...";
    MySudokuSolver solver;
    generater.Generate();
    solver.importGrid(generater.getGrid());
    int setclue=71-hardness*6;
    std::vector<int> tem=generater.getGrid();//solver.setClue(setclue);
    for(int i=0;i<81;i++)
    {
        //保存每个位置的可能集合
        GridNumbers.push_back(tem[i]);
        std::set<int> t;
        t.insert(tem[i]);
        Buttons[i]->BoardButton_UpdateBoard(t);
        if (tem[i]!=0)
            Clue++;
    }
    qDebug()<<"--Import()...Done";
    emit Grid_Clue_Broadcast(Clue);
    Steps.clear();
    stepIndex=-0.5;
    ImportFlag=2;
    return;
}

//保存全局地图
void SudokuGridWidget::Grid_OnChangeGridSet(std::set<int> set_,int v)
{
    qDebug()<<"--Grid_OnChangeGridSet()...";
    MyGridButtonWithBoardMenu *btn=qobject_cast<MyGridButtonWithBoardMenu*>(sender());
    QString name=btn->objectName();
    int x=name.toInt()%10;
    int y=name.toInt()/10;
    if(ImportFlag==2)
        //Steps步骤保存
        if(FakeClick==0)
            if(Steps.size()==10)//满了
            {
                if(stepIndex==8.5)//正常进行
                {
                    Steps.pop_front();
                }
                else//正在后退过程中
                {
                    while(Steps.size()>stepIndex+1.5)
                        Steps.pop_back();//去掉尾部
                    stepIndex+=1;
                }
                Steps.push_back(Step(QPoint(x,y),v));
            }
            else//没满
            {
                Steps.push_back(Step(QPoint(x,y),v));
                stepIndex+=1;
            }
        else
            FakeClick-=1;
    qDebug()<<"\tFakeClick="<<FakeClick;
    //一种情况：位置原来为0，现在set中不是一个有效点
    //原来不为0，现在是设为2+或者是0
    qDebug()<<"\t("<<x<<","<<y<<")";
    qDebug()<<"\tGridNumbers[here]="<<GridNumbers[x+y*9-10];
    qDebug()<<"\tset_.size()="<<set_.size();
    if(GridNumbers[x+y*9-10]!=0&&set_.size()!=2)//原本不为0的点现在填入了不止一个或者没有数字
    {
        Clue-=1;
        GridNumbers[x+y*9-10]=0;
        qDebug()<<"\tClue is now: "<<Clue;
    }
    if(set_.size()==2)//当前点只有一个
    {
        if(GridNumbers[x+y*9-10]==0)//空白点填入
        {
            Clue++;
            GridNumbers[x+y*9-10]=*(set_.rbegin());
            Check();
        }
        else
            GridNumbers[x+y*9-10]=*(set_.rbegin());
    }
    if(ImportFlag==2)
    {
        qDebug()<<"\tClue is now: "<<Clue;
        emit Grid_Clue_Broadcast(Clue);
    }
}

void SudokuGridWidget::Grid_Pause(bool show)
{
    Pause!=Pause;
    qDebug()<<"Pause "<<(show?"true":"false");
}
void SudokuGridWidget::Grid_Forward()
{
    if(stepIndex+1.5<Steps.size())
    {
        stepIndex+=1;
        qDebug()<<"--Grid_Forward():"<<stepIndex;
        Step t=Steps[stepIndex-0.5];
        FakeClick+=1;
        MyGridButtonWithBoardMenu* btn=Buttons[t.point.x()+t.point.y()*9-10];
        btn->BoardButton_FakeBoardClicked(t.num);
        //此时相当于增加了Steps[stepIndex]一步
    }

}
void SudokuGridWidget::Grid_Back()
{
    if(stepIndex>0)
    {
        stepIndex-=1;
        qDebug()<<"--Grid_Back():"<<stepIndex;
        Step t=Steps[stepIndex+0.5];
        FakeClick+=1;
        MyGridButtonWithBoardMenu* btn=Buttons[t.point.x()+t.point.y()*9-10];
        btn->BoardButton_FakeBoardClicked(t.num);

    }
}
void SudokuGridWidget::Check()
{
    if(Clue==81)
    {
        qDebug()<<"Win!"<<endl;
        emit Grid_Finished();
    }
}
void SudokuGridWidget::Grid_Select(int v)
{
    if(ImportFlag<2)
    qDebug()<<"--Grid_Select("<<v<<")";
    if(v==0||v==selectNumber)//回复原状
    {
        selectNumber=0;
        for(int i=0;i<81;i++)
        {
            MyGridButtonWithBoardMenu* btn=Buttons[i];
            btn->SetColor("");
        }
    }
    else//选中某个数字
    {
        for(int i=0;i<81;i++)
        {

            MyGridButtonWithBoardMenu* btn=Buttons[i];
            if(GridNumbers[i]==v)//同数字点
            {
                btn->SetColor(QString("ss"));
            }
            else
            {
                int x=i%9;
                int y=i/9;
                bool Safeflag=true;
                for(int j=0;j<9;j++)
                {
                    if(GridNumbers[y*9+j]==v||GridNumbers[j*9+x]==v||GridNumbers[x/3*3+y/3*27+j/3*9+j%3]==v)//同Box
                    {
                        Safeflag=false;
                        break;
                    }
                }
                if(Safeflag)//安全
                {
                    btn->SetColor("");
                }
                else//不安全但是不是v
                    btn->SetColor("s");
            }
        }
        selectNumber=v;
    }

}
